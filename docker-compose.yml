version: "3.9"

# Shared environment configuration
x-app-env: &app-env
  APP_ENV: ${APP_ENV:-development}
  SERVER_HOST: 0.0.0.0
  SERVER_PORT: 8080

# Shared logging configuration
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth-kawasan-digital
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      <<: *app-env
      # Database connection
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-authuser}
      DB_PASSWORD: ${DB_PASSWORD:-authpassword}
      DB_NAME: ${DB_NAME:-auth_kawasan_digital}

      # Supabase configuration
      SUPABASE_PROJECT_ID: ${SUPABASE_PROJECT_ID:-your-project-id}
      SUPABASE_API_SECRET_KEY: ${SUPABASE_API_SECRET_KEY:-your-api-secret-key}

      # CORS Configuration
      CORS_ENABLED: ${CORS_ENABLED:-true}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000}

      # Logging
      LOG_FILE_PATH: /app/logs/app.log
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env
    # depends_on:
    # - postgres
    # - redis
    networks:
      - backend
    logging: *default-logging

  # PostgreSQL Database
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: auth-postgres
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: ${DB_NAME:-auth_kawasan_digital}
  #     POSTGRES_USER: ${DB_USER:-authuser}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD:-authpassword}
  #   ports:
  #     - "${DB_PORT:-5432}:5432"
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #     - ./db/migrations:/docker-entrypoint-initdb.d
  #   networks:
  #     - backend
  #   logging: *default-logging

  # Redis for caching and rate limiting
  # redis:
  #   image: redis:7-alpine
  #   container_name: auth-redis
  #   restart: unless-stopped
  #   ports:
  #     - "${REDIS_PORT:-6379}:6379"
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - backend
  #   logging: *default-logging

  # Prometheus Monitoring
  # prometheus:
  #   image: prom/prometheus:v2.45.0
  #   container_name: auth-prometheus
  #   restart: unless-stopped
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - ./monitoring/alerts:/etc/prometheus/alerts
  #     - prometheus-data:/prometheus
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yml"
  #     - "--storage.tsdb.path=/prometheus"
  #     - "--web.console.libraries=/etc/prometheus/console_libraries"
  #     - "--web.console.templates=/etc/prometheus/consoles"
  #     - "--web.enable-lifecycle"
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - backend
  #   logging: *default-logging

  # # AlertManager for Prometheus
  # alertmanager:
  #   image: prom/alertmanager:v0.26.0
  #   container_name: auth-alertmanager
  #   restart: unless-stopped
  #   volumes:
  #     - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
  #   command:
  #     - "--config.file=/etc/alertmanager/alertmanager.yml"
  #   ports:
  #     - "9093:9093"
  #   networks:
  #     - backend
  #   logging: *default-logging

  # # Grafana Visualization
  # grafana:
  #   image: grafana/grafana:9.5.3
  #   container_name: auth-grafana
  #   restart: unless-stopped
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
  #     - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
  #   volumes:
  #     - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
  #     - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
  #     - grafana-data:/var/lib/grafana
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - backend
  #   logging: *default-logging

# Persistent volume definitions
# volumes:
  # postgres-data:
  #   driver: local
  # redis-data:
  #   driver: local
  # prometheus-data:
  #   driver: local
  # grafana-data:
  #   driver: local

# Network definition
networks:
  backend:
    driver: bridge
